{"version":3,"sources":["App.js","index.js"],"names":["TableContent","React","lazy","App","useState","selectedDate","setSelectedDate","error","setError","isLoading","setIsLoading","isTableRendered","setIsTableRendered","oddsData","setOddsData","id","title","selected","key","lotteryDates","setLotteryDates","isInitialMount","useRef","useEffect","current","fetch","PROXY_URL","then","response","ok","json","Error","data","convertedOddsData","rank","rankNumber","parseInt","slice","push","tier","match","winners","amount","prize","convertOddsData","last","odds","catch","className","list","onSelecting","temp","forEach","item","preSelectedDate","find","el","split","reverse","join","fallback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAcMA,G,MAAeC,IAAMC,MAAK,kBAAM,iCAyHvBC,MArHf,WACE,IADa,EA4B2BC,mBAAS,MA5BpC,mBA4BNC,EA5BM,KA4BQC,EA5BR,OA6BaF,mBAAS,MA7BtB,mBA6BNG,EA7BM,KA6BCC,EA7BD,OA8BqBJ,oBAAS,GA9B9B,mBA8BNK,EA9BM,KA8BKC,EA9BL,OA+BiCN,oBAAS,GA/B1C,mBA+BNO,EA/BM,KA+BWC,EA/BX,OAgCmBR,mBAAS,IAhC5B,mBAgCNS,EAhCM,KAgCIC,EAhCJ,OAiC2BV,mBAhCZ,CAC1B,CACEW,GAAI,EACJC,MAAO,aACPC,UAAU,EACVC,IAAK,gBAEP,CACEH,GAAI,EACJC,MAAO,aACPC,UAAU,EACVC,IAAK,gBAEP,CACEH,GAAI,EACJC,MAAO,aACPC,UAAU,EACVC,IAAK,gBAEP,CACEH,GAAI,EACJC,MAAO,aACPC,UAAU,EACVC,IAAK,kBAxBI,mBAiCNC,EAjCM,KAiCQC,EAjCR,KAkCPC,EAAiBC,kBAAO,GAiE9B,OAzCAC,qBAAU,WACR,GAAIF,EAAeG,QACjBH,EAAeG,SAAU,MACpB,CAEHd,GAAa,GAEbe,MAAMC,0FAAsBrB,GACzBsB,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAM,+BAGnBJ,MAAK,SAAAK,GACJ,IAAMC,EAjCQ,SAAAD,GACtB,IAAMnB,EAAWmB,EACbC,EAAoB,GACxB,IAAK,IAAMC,KAAQrB,EAAU,CAC3B,IAAMsB,EAAaC,SAASF,EAAKG,MAAM,IACnCF,GACFF,EAAkBK,KAAK,CACrBC,KAAMJ,EACNK,MAAO,EACPC,QAAS5B,EAASqB,GAAMO,QACxBC,OAAQ7B,EAASqB,GAAMS,QAI7B,OAAOV,EAmB2BW,CAAgBZ,EAAKa,KAAK,GAAGC,MACvDhC,EAAYmB,GACZvB,GAAa,GACbE,GAAmB,MAEpBmC,OAAM,SAAAxC,GACLC,EAASD,GACTG,GAAa,GACbE,GAAmB,SAK1B,CAACO,EAAcd,IAahB,yBAAK2C,UAAU,OACb,8CACA,yDACA,kBAAC,IAAD,CACEhC,MAAM,sBACNiC,KAAM9B,EACN+B,YAjBkB,SAACnC,EAAIG,GAC3B,IAAIiC,EAAOhC,EACXgC,EAAKC,SAAQ,SAAAC,GAAI,OAAKA,EAAKpC,UAAW,KACtCkC,EAAKpC,GAAIE,UAAW,EACpB,IAAMqC,EAAmCH,EAxDdI,MAAK,SAAAC,GAAE,OAAoB,IAAhBA,EAAGvC,YACrBD,MAAMyC,MAAM,KAAKC,UAAUC,KAAK,IAyDpDvC,EAAgB+B,GAChB7C,EAAgBgD,MAYd,kBAAC,WAAD,CAAUM,SAAU,4CAChBjD,GACA,kBAACX,EAAD,CAAca,SAAUA,EAAUJ,UAAWA,EAAWF,MAAOA,OC3HzEsD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.edc821aa.chunk.js","sourcesContent":["import React, { Suspense, useState, useEffect, useRef } from 'react';\nimport { Dropdown } from 'presnyakova-lib';\n\nimport './App.css';\n\n// ### App.js with hooks\n\n// I add proxy like this to avoid CORS issue on github pages\n// that's not optimum solution, as if heroku is down , users can use my app as well\n// if I control the server I could add Access-Control-Allow-Origin to response header\n// Or with Node.js you can set up your own proxy\n// I also read that github pages should support CORS, but somehow I didn't work\n// Due to time limit I decided to go with quick solution\n\nconst TableContent = React.lazy(() => import('./TableContent'));\nconst PROXY_URL = 'https://cors-anywhere.herokuapp.com/';\nconst API_URL = 'https://www.lottoland.com/api/drawings/euroJackpot/';\n\nfunction App() {\n  const lotteryDatesInitial = [\n    {\n      id: 0,\n      title: '04-09-2020',\n      selected: false,\n      key: 'lotteryDates',\n    },\n    {\n      id: 1,\n      title: '11-09-2020',\n      selected: false,\n      key: 'lotteryDates',\n    },\n    {\n      id: 2,\n      title: '18-09-2020',\n      selected: false,\n      key: 'lotteryDates',\n    },\n    {\n      id: 3,\n      title: '25-09-2020',\n      selected: false,\n      key: 'lotteryDates',\n    },\n  ];\n\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTableRendered, setIsTableRendered] = useState(false);\n  const [oddsData, setOddsData] = useState([]);\n  const [lotteryDates, setLotteryDates] = useState(lotteryDatesInitial);\n  const isInitialMount = useRef(true);\n\n  const findSelectedDate = dates => {\n    const selectedItem = dates.find(el => el.selected === true);\n    return selectedItem.title.split('-').reverse().join('');\n  };\n\n  const convertOddsData = data => {\n    const oddsData = data;\n    let convertedOddsData = [];\n    for (const rank in oddsData) {\n      const rankNumber = parseInt(rank.slice(4));\n      if (rankNumber) {\n        convertedOddsData.push({\n          tier: rankNumber,\n          match: 0,\n          winners: oddsData[rank].winners,\n          amount: oddsData[rank].prize,\n        });\n      }\n    }\n    return convertedOddsData;\n  };\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      const fetchLotteryData = () => {\n        setIsLoading(true);\n        // See comment above about PROXY_URL\n        fetch(PROXY_URL + API_URL + selectedDate)\n          .then(response => {\n            if (response.ok) {\n              return response.json();\n            } else {\n              throw new Error('Something went wrong ...');\n            }\n          })\n          .then(data => {\n            const convertedOddsData = convertOddsData(data.last[0].odds);\n            setOddsData(convertedOddsData);\n            setIsLoading(false);\n            setIsTableRendered(true);\n          })\n          .catch(error => {\n            setError(error);\n            setIsLoading(false);\n            setIsTableRendered(true);\n          });\n      };\n      fetchLotteryData();\n    }\n  }, [lotteryDates, selectedDate]);\n\n  const setSelectedItem = (id, key) => {\n    let temp = lotteryDates;\n    temp.forEach(item => (item.selected = false));\n    temp[id].selected = true;\n    const preSelectedDate = findSelectedDate(temp);\n\n    setLotteryDates(temp);\n    setSelectedDate(preSelectedDate);\n  };\n\n  return (\n    <div className='App'>\n      <h1>Hello, world! </h1>\n      <p>Let's know the gamble data</p>\n      <Dropdown\n        title='Select lottery date'\n        list={lotteryDates}\n        onSelecting={setSelectedItem}\n      />\n      <Suspense fallback={<div>loading...</div>}>\n        { isTableRendered &&\n          <TableContent oddsData={oddsData} isLoading={isLoading} error={error} />\n        }\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}