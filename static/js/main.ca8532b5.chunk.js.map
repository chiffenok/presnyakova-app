{"version":3,"sources":["TableContent.js","App.js","index.js"],"names":["TableContent","props","oddsData","isLoading","error","message","length","data","dataThead","title","App","useState","selectedDate","setSelectedDate","setError","setIsLoading","setOddsData","id","selected","key","lotteryDates","setLotteryDates","isInitialMount","useRef","useEffect","current","fetch","PROXY_URL","then","response","ok","json","Error","convertedOddsData","rank","rankNumber","parseInt","slice","push","tier","match","winners","amount","prize","convertOddsData","last","odds","catch","className","list","onSelecting","temp","forEach","item","preSelectedDate","find","el","split","reverse","join","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAuCeA,EApCM,SAAAC,GAAU,IACrBC,EAA+BD,EAA/BC,SAAUC,EAAqBF,EAArBE,UAAWC,EAAUH,EAAVG,MAgB7B,OAAIA,EACK,2BAAIA,EAAMC,SAGfF,EACK,0CAELD,EAASI,OAAS,EAEhB,kBAAC,WAAD,KACI,uDACA,kBAAC,IAAD,CAAOC,KAAML,EAAUM,UA1Bd,CACjB,CACEC,MAAO,QAET,CACEA,MAAO,SAET,CACEA,MAAO,WAET,CACEA,MAAO,cAoBJ,sD,MC2FMC,MA9Gf,WACE,IADa,EA4B2BC,mBAAS,MA5BpC,mBA4BNC,EA5BM,KA4BQC,EA5BR,OA6BaF,mBAAS,MA7BtB,mBA6BNP,EA7BM,KA6BCU,EA7BD,OA8BqBH,oBAAS,GA9B9B,mBA8BNR,EA9BM,KA8BKY,EA9BL,OA+BmBJ,mBAAS,IA/B5B,mBA+BNT,EA/BM,KA+BIc,EA/BJ,OAgC2BL,mBA/BZ,CAC1B,CACEM,GAAI,EACJR,MAAO,aACPS,UAAU,EACVC,IAAK,gBAEP,CACEF,GAAI,EACJR,MAAO,aACPS,UAAU,EACVC,IAAK,gBAEP,CACEF,GAAI,EACJR,MAAO,aACPS,UAAU,EACVC,IAAK,gBAEP,CACEF,GAAI,EACJR,MAAO,aACPS,UAAU,EACVC,IAAK,kBAxBI,mBAgCNC,EAhCM,KAgCQC,EAhCR,KAiCPC,EAAiBC,kBAAO,GA+D9B,OAvCAC,qBAAU,WACR,GAAIF,EAAeG,QACjBH,EAAeG,SAAU,MACpB,CAEHV,GAAa,GAEbW,MAAMC,0FAAsBf,GACzBgB,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAEhB,MAAM,IAAIC,MAAM,+BAGnBJ,MAAK,SAAArB,GACJ,IAAM0B,EAjCQ,SAAA1B,GACtB,IAAML,EAAWK,EACb0B,EAAoB,GACxB,IAAK,IAAMC,KAAQhC,EAAU,CAC3B,IAAMiC,EAAaC,SAASF,EAAKG,MAAM,IACnCF,GACFF,EAAkBK,KAAK,CACrBC,KAAMJ,EACNK,MAAO,EACPC,QAASvC,EAASgC,GAAMO,QACxBC,OAAQxC,EAASgC,GAAMS,QAI7B,OAAOV,EAmB2BW,CAAgBrC,EAAKsC,KAAK,GAAGC,MACvD9B,EAAYiB,GACZlB,GAAa,MAEdgC,OAAM,SAAA3C,GACLU,EAASV,GACTW,GAAa,SAKpB,CAACK,EAAcR,IAahB,yBAAKoC,UAAU,OACb,8CACA,yDACA,kBAAC,IAAD,CACEvC,MAAM,sBACNwC,KAAM7B,EACN8B,YAjBkB,SAACjC,EAAIE,GAC3B,IAAIgC,EAAO/B,EACX+B,EAAKC,SAAQ,SAAAC,GAAI,OAAKA,EAAKnC,UAAW,KACtCiC,EAAKlC,GAAIC,UAAW,EACpB,IAAMoC,EAAmCH,EAtDdI,MAAK,SAAAC,GAAE,OAAoB,IAAhBA,EAAGtC,YACrBT,MAAMgD,MAAM,KAAKC,UAAUC,KAAK,IAuDpDtC,EAAgB8B,GAChBtC,EAAgByC,MAYd,kBAAC,EAAD,CAAcpD,SAAUA,EAAUC,UAAWA,EAAWC,MAAOA,MCrHrEwD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.ca8532b5.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\nimport { Table } from 'presnyakova-lib';\n\nconst TableContent = props => {\n  const { oddsData, isLoading, error } = props;\n  const headerData = [\n    {\n      title: 'Tier',\n    },\n    {\n      title: 'Match',\n    },\n    {\n      title: 'Winners',\n    },\n    {\n      title: 'Amount',\n    },\n  ];\n\n  if (error) {\n    return <p>{error.message}</p>;\n  }\n\n  if (isLoading) {\n    return <p>Loading ...</p>;\n  }\n  if (oddsData.length > 0) {\n    return (\n        <Fragment>\n            <p>Results for chosen date:</p>\n            <Table data={oddsData} dataThead={headerData} />\n        </Fragment>\n    ) \n  }\n\n  return <p>Choose the date first.</p>\n};\n\nexport default TableContent;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Dropdown } from 'presnyakova-lib';\nimport TableContent from './TableContent';\nimport './App.css';\n\n// ### App.js with hooks\n\n// I add proxy like this to avoid CORS issue on github pages\n// that's not optimum solution, as if heroku is down , users can use my app as well\n// if I control the server I could add Access-Control-Allow-Origin to response header\n// Or with Node.js you can set up your own proxy\n// I also read that github pages should support CORS, but somehow I didn't work\n// Due to time limit I decided to go with quick solution\n\nconst PROXY_URL = 'https://cors-anywhere.herokuapp.com/';\nconst API_URL = 'https://www.lottoland.com/api/drawings/euroJackpot/';\n\nfunction App() {\n  const lotteryDatesInitial = [\n    {\n      id: 0,\n      title: '04-09-2020',\n      selected: false,\n      key: 'lotteryDates',\n    },\n    {\n      id: 1,\n      title: '11-09-2020',\n      selected: false,\n      key: 'lotteryDates',\n    },\n    {\n      id: 2,\n      title: '18-09-2020',\n      selected: false,\n      key: 'lotteryDates',\n    },\n    {\n      id: 3,\n      title: '25-09-2020',\n      selected: false,\n      key: 'lotteryDates',\n    },\n  ];\n\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [oddsData, setOddsData] = useState([]);\n  const [lotteryDates, setLotteryDates] = useState(lotteryDatesInitial);\n  const isInitialMount = useRef(true);\n\n  const findSelectedDate = dates => {\n    const selectedItem = dates.find(el => el.selected === true);\n    return selectedItem.title.split('-').reverse().join('');\n  };\n\n  const convertOddsData = data => {\n    const oddsData = data;\n    let convertedOddsData = [];\n    for (const rank in oddsData) {\n      const rankNumber = parseInt(rank.slice(4));\n      if (rankNumber) {\n        convertedOddsData.push({\n          tier: rankNumber,\n          match: 0,\n          winners: oddsData[rank].winners,\n          amount: oddsData[rank].prize,\n        });\n      }\n    }\n    return convertedOddsData;\n  };\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      const fetchLotteryData = () => {\n        setIsLoading(true);\n        // See comment above about PROXY_URL\n        fetch(PROXY_URL + API_URL + selectedDate)\n          .then(response => {\n            if (response.ok) {\n              return response.json();\n            } else {\n              throw new Error('Something went wrong ...');\n            }\n          })\n          .then(data => {\n            const convertedOddsData = convertOddsData(data.last[0].odds);\n            setOddsData(convertedOddsData);\n            setIsLoading(false);\n          })\n          .catch(error => {\n            setError(error);\n            setIsLoading(false);\n          });\n      };\n      fetchLotteryData();\n    }\n  }, [lotteryDates, selectedDate]);\n\n  const setSelectedItem = (id, key) => {\n    let temp = lotteryDates;\n    temp.forEach(item => (item.selected = false));\n    temp[id].selected = true;\n    const preSelectedDate = findSelectedDate(temp);\n\n    setLotteryDates(temp);\n    setSelectedDate(preSelectedDate);\n  };\n\n  return (\n    <div className='App'>\n      <h1>Hello, world! </h1>\n      <p>Let's know the gamble data</p>\n      <Dropdown\n        title='Select lottery date'\n        list={lotteryDates}\n        onSelecting={setSelectedItem}\n      />\n      <TableContent oddsData={oddsData} isLoading={isLoading} error={error} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}